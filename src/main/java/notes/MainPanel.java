package notes;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import org.apache.commons.lang3.SystemUtils;

import javax.swing.*;
import java.awt.*;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;

/**
 * Created on 18/05/15.
 *
 * @author gaugendre
 */
public class MainPanel {
    private JPanel mainPanel;
    private JButton selectFileButton;
    private JButton editFileButton;
    private JButton computeFileButton;
    private JTextArea resultArea;
    private JFrame container;
    private File notesFile;
    private boolean ok;

    public JPanel getMainPanel() {
        return mainPanel;
    }

    public void printFile() throws IOException {
        BufferedReader br = new BufferedReader(new FileReader(notesFile));
        String s = new String();
        while ((s = br.readLine()) != null) {
            resultArea.append(s + "\n");
        }
    }

    public MainPanel(JFrame container) {
        this.container = container;
        this.ok = false;
        selectFileButton.addActionListener(e -> {
            if (SystemUtils.IS_OS_WINDOWS) {
                JFileChooser fc = new JFileChooser();
                int retVal = fc.showOpenDialog(container);

                if (retVal == JFileChooser.APPROVE_OPTION) {
                    notesFile = fc.getSelectedFile();
                } else {
                    System.err.println("Erreur dans la sélection du fichier.");
                    ok = false;
                }
            } else {
                FileDialog fd = new FileDialog(container, "Choisissez un fichier", FileDialog.LOAD);
                fd.setLocationRelativeTo(container);
                fd.setVisible(true);

                String fileName = fd.getFile();
                String directoryName = fd.getDirectory();

                if (fileName != null) {
                    notesFile = new File(directoryName + fileName);
                    ok = true;
                } else {
                    System.err.println("Erreur dans la sélection du fichier.");
                    ok = false;
                }
            }
            if (ok) {
                try {
                    printFile();
                } catch (IOException e1) {
                    e1.printStackTrace();
                }
            }
        });
        editFileButton.addActionListener(e -> {
            if (Desktop.getDesktop().isSupported(Desktop.Action.EDIT)) {
                try {
                    Desktop.getDesktop().edit(notesFile);
                } catch (IOException e1) {
                    e1.printStackTrace(System.err);
                }
            } else {
                JOptionPane.showMessageDialog(container, "This action is not yet supported on your system.",
                        "Error: action not supported.", JOptionPane.ERROR_MESSAGE);
            }
        });
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(1, 2, new Insets(10, 10, 10, 10), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 4, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setFont(new Font("Monospaced", label1.getFont().getStyle(), 14));
        label1.setText("NOM-PRENOM");
        panel1.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setFont(new Font("Monospaced", label2.getFont().getStyle(), 14));
        label2.setText("NOTE 1");
        panel1.add(label2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setFont(new Font("Monospaced", label3.getFont().getStyle(), 14));
        label3.setText("NOTE 2");
        panel1.add(label3, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label4 = new JLabel();
        label4.setFont(new Font("Monospaced", label4.getFont().getStyle(), 14));
        label4.setText("MOY ETUD");
        panel1.add(label4, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel1.add(scrollPane1, new GridConstraints(1, 0, 1, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        resultArea = new JTextArea();
        resultArea.setColumns(55);
        resultArea.setEditable(false);
        resultArea.setFont(new Font("Monospaced", resultArea.getFont().getStyle(), 14));
        resultArea.setRows(20);
        scrollPane1.setViewportView(resultArea);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(panel2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        selectFileButton = new JButton();
        selectFileButton.setText("Sélectionner le fichier de notes");
        panel2.add(selectFileButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        editFileButton = new JButton();
        editFileButton.setText("Éditer le fichier de notes");
        panel2.add(editFileButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        computeFileButton = new JButton();
        computeFileButton.setText("Calculer moyennes et écart types");
        panel2.add(computeFileButton, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }
}
