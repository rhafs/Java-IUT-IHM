package calculatrice;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import java.awt.*;

/**
 * Created on 09/04/15.
 *
 * @author gaugendre
 */
public class MainPanel {
    private JPanel mainPanel;
    private JFrame container;
    private JTextField firstOpField;
    private JTextField secOpField;
    private JButton addButton;
    private JTextField resField;
    private JLabel opLabel;
    private JButton subButton;
    private JButton mulButton;
    private JButton divButton;
    private double op1 = 0;
    private double op2 = 0;
    private boolean ok = true;

    public MainPanel(JFrame container) {
        this.container = container;
        container.setFocusTraversalPolicy(new CalculatriceFocusTraversalPolicy());
        addButton.addActionListener(e -> {
            opLabel.setText("+");
            readAndValidate();
            if (ok)
                setResult(op1 + op2);
        });
        subButton.addActionListener(e -> {
            opLabel.setText("-");
            readAndValidate();
            if (ok)
                setResult(op1 - op2);
        });
        mulButton.addActionListener(e -> {
            opLabel.setText("x");
            readAndValidate();
            if (ok)
                setResult(op1 * op2);
        });
        divButton.addActionListener(e -> {
            opLabel.setText("/");
            readAndValidate();
            if (ok)
                setResult(op1 / op2);
        });
    }

    public void readAndValidate() {
        try {
            op1 = Double.parseDouble(firstOpField.getText());
            ok = true;
        } catch (NumberFormatException nfe) {
            firstOpField.selectAll();
            firstOpField.requestFocus();
            firstOpField.setText("???");
            resField.setText(" ");
            ok = false;
        }
        try {
            op2 = Double.parseDouble(secOpField.getText());
            ok = true;
        } catch (NumberFormatException nfe) {
            secOpField.setText("???");
            if (ok) {
                secOpField.selectAll();
                secOpField.requestFocus();
                resField.setText(" ");
                ok = false;
            }
        }
    }

    public void setResult(double result) {
        resField.setText(String.format("%-9.2f", result));
        firstOpField.selectAll();
        firstOpField.requestFocus();
    }

    public JPanel getMainPanel() {
        return mainPanel;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(7, 6, new Insets(0, 0, 0, 0), -1, -1));
        final JLabel label1 = new JLabel();
        label1.setFont(new Font("Droid Sans", label1.getFont().getStyle(), 18));
        label1.setText("Opérande 1");
        mainPanel.add(label1, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setFont(new Font("Droid Sans", label2.getFont().getStyle(), 18));
        label2.setText("Opérande 2");
        mainPanel.add(label2, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        firstOpField = new JTextField();
        mainPanel.add(firstOpField, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        secOpField = new JTextField();
        mainPanel.add(secOpField, new GridConstraints(3, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setFont(new Font("Droid Sans", label3.getFont().getStyle(), 18));
        label3.setText("Résultat");
        mainPanel.add(label3, new GridConstraints(5, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        resField = new JTextField();
        resField.setEditable(false);
        resField.setFocusable(true);
        mainPanel.add(resField, new GridConstraints(5, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        opLabel = new JLabel();
        opLabel.setFont(new Font("Droid Sans", opLabel.getFont().getStyle(), 18));
        opLabel.setText("+");
        mainPanel.add(opLabel, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label4 = new JLabel();
        label4.setFont(new Font("Droid Sans", label4.getFont().getStyle(), 18));
        label4.setText("=");
        mainPanel.add(label4, new GridConstraints(4, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        mainPanel.add(spacer1, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(-1, 5), null, 0, false));
        final Spacer spacer2 = new Spacer();
        mainPanel.add(spacer2, new GridConstraints(3, 5, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, new Dimension(5, -1), null, 0, false));
        final Spacer spacer3 = new Spacer();
        mainPanel.add(spacer3, new GridConstraints(6, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(-1, 5), null, 0, false));
        final Spacer spacer4 = new Spacer();
        mainPanel.add(spacer4, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, new Dimension(5, -1), null, 0, false));
        addButton = new JButton();
        addButton.setFont(new Font("Droid Sans", addButton.getFont().getStyle(), 18));
        addButton.setText("+");
        mainPanel.add(addButton, new GridConstraints(1, 3, 2, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(30, 30), null, 0, false));
        subButton = new JButton();
        subButton.setFont(new Font("Droid Sans", subButton.getFont().getStyle(), 18));
        subButton.setText("-");
        mainPanel.add(subButton, new GridConstraints(1, 4, 2, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(30, 30), null, 0, false));
        mulButton = new JButton();
        mulButton.setFont(new Font("Droid Sans", mulButton.getFont().getStyle(), 18));
        mulButton.setText("x");
        mainPanel.add(mulButton, new GridConstraints(3, 3, 2, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(30, 30), null, 0, false));
        divButton = new JButton();
        divButton.setFont(new Font("Droid Sans", divButton.getFont().getStyle(), 18));
        divButton.setText("/");
        mainPanel.add(divButton, new GridConstraints(3, 4, 2, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(30, 30), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

    class CalculatriceFocusTraversalPolicy extends FocusTraversalPolicy {

        @Override
        public Component getComponentAfter(Container aContainer, Component aComponent) {
            if (aComponent.equals(firstOpField)) {
                return secOpField;
            } else if (aComponent.equals(secOpField)) {
                return addButton;
            } else if (aComponent.equals(addButton)) {
                return subButton;
            } else if (aComponent.equals(subButton)) {
                return mulButton;
            } else if (aComponent.equals(mulButton)) {
                return divButton;
            } else if (aComponent.equals(divButton)) {
                return firstOpField;
            } else {
                return firstOpField;
            }
        }

        @Override
        public Component getComponentBefore(Container aContainer, Component aComponent) {
            if (aComponent.equals(firstOpField)) {
                return divButton;
            } else if (aComponent.equals(secOpField)) {
                return firstOpField;
            } else if (aComponent.equals(addButton)) {
                return secOpField;
            } else if (aComponent.equals(subButton)) {
                return addButton;
            } else if (aComponent.equals(mulButton)) {
                return subButton;
            } else if (aComponent.equals(divButton)) {
                return mulButton;
            } else {
                return firstOpField;
            }
        }

        @Override
        public Component getFirstComponent(Container aContainer) {
            return firstOpField;
        }

        @Override
        public Component getLastComponent(Container aContainer) {
            return divButton;
        }

        @Override
        public Component getDefaultComponent(Container aContainer) {
            return firstOpField;
        }
    }


}
